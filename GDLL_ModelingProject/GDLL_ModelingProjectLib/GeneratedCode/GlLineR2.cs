//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

public class GlLineR2 : GlFigure
{
	public override GlRectangle BOX
	{
		get

		{
			throw new System.NotImplementedException();
		}
		private set

		{
			throw new System.NotImplementedException();
		}
	}

	public override GlPointR2 Center
	{
		get

		{
			throw new System.NotImplementedException();
		}
		private set

		{
			throw new System.NotImplementedException();
		}
	}

	public override int CountOfPoints
	{
		get

		{
			throw new System.NotImplementedException();
		}
		private set

		{
			throw new System.NotImplementedException();
		}
	}

	private const float FAULT = 0.001f;

	private GlVectorR2 directVector;

	private GlPointR2 pointOfLine;

	public virtual float Length
	{
		get

		{
			throw new System.NotImplementedException();
		}
		private set

		{
			throw new System.NotImplementedException();
		}
	}

	public virtual GlPointR2 PointOfLine
	{
		get

		{
			throw new System.NotImplementedException();
		}
		private set

		{
			throw new System.NotImplementedException();
		}
	}

	public virtual GlVectorR2 DirectVector
	{
		get

		{
			throw new System.NotImplementedException();
		}
		private set

		{
			throw new System.NotImplementedException();
		}
	}

	public override void moveTo(float x, float y)
	{
		throw new System.NotImplementedException();
	}

	public override void Rotate(float angle)
	{
		throw new System.NotImplementedException();
	}

	public override void Rotate(float SIN, float COS)
	{
		throw new System.NotImplementedException();
	}

	public override GlFigure getScaled(float scale)
	{
		throw new System.NotImplementedException();
	}

	public override IEnumerable<GlPointR2> getIntersection(GlLineR2 L)
	{
		throw new System.NotImplementedException();
	}

	public override IEnumerable<GlPointR2> getIntersection(GlCurve C)
	{
		throw new System.NotImplementedException();
	}

	public override IEnumerable<GlPointR2> getIntersection(GlPolygon POLY)
	{
		throw new System.NotImplementedException();
	}

	public override void Draw()
	{
		throw new System.NotImplementedException();
	}

	public override void DrawFill()
	{
		throw new System.NotImplementedException();
	}

	public override void Draw(GlTexture T)
	{
		throw new System.NotImplementedException();
	}

	public override void Draw(GlRectangle Border)
	{
		throw new System.NotImplementedException();
	}

	public virtual void DrawFill(GlRectangle R)
	{
		throw new System.NotImplementedException();
	}

	public GlLineR2(GlPointR2 belongsPoint, GlVectorR2 directVector)
	{
	}

	public GlLineR2(GlLineR2 copyLine)
	{
	}

	public virtual GlPointR2 getProjection(GlPointR2 p)
	{
		throw new System.NotImplementedException();
	}

	public virtual GlLineR2 getPerpendicular(GlPointR2 P)
	{
		throw new System.NotImplementedException();
	}

	public virtual GlLineR2 getParallel(GlPointR2 P)
	{
		throw new System.NotImplementedException();
	}

	public virtual void Draw(float length)
	{
		throw new System.NotImplementedException();
	}

	public virtual void Draw(float length, float width)
	{
		throw new System.NotImplementedException();
	}

	public virtual void Draw(float length, GlColor drawColor)
	{
		throw new System.NotImplementedException();
	}

	public virtual void Draw(float length, float width, GlColor drawColor)
	{
		throw new System.NotImplementedException();
	}

	private void ActivateDrawed()
	{
		throw new System.NotImplementedException();
	}

	private void ActivateDrawing()
	{
		throw new System.NotImplementedException();
	}

	private bool ActivateDrawStart()
	{
		throw new System.NotImplementedException();
	}

	public override bool isPointBelongs(GlPointR2 P)
	{
		throw new System.NotImplementedException();
	}

	public virtual float getDistance(GlPointR2 P)
	{
		throw new System.NotImplementedException();
	}

	public virtual bool isNullLine()
	{
		throw new System.NotImplementedException();
	}

	public virtual bool Equals(object obj)
	{
		throw new System.NotImplementedException();
	}

	public static bool Equals(GlLineR2 P1, GlLineR2 P2)
	{
		throw new System.NotImplementedException();
	}

	public virtual string ToString()
	{
		throw new System.NotImplementedException();
	}

}

