//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

public class GlPointR2 : GlFigure
{
	private float x;

	private float y;

	public virtual float X
	{
		get

		{
			throw new System.NotImplementedException();
		}
		set

		{
			throw new System.NotImplementedException();
		}
	}

	public virtual float Y
	{
		get

		{
			throw new System.NotImplementedException();
		}
		set

		{
			throw new System.NotImplementedException();
		}
	}

	public override int CountOfPoints
	{
		get

		{
			throw new System.NotImplementedException();
		}
		private set

		{
			throw new System.NotImplementedException();
		}
	}

	public override GlPointR2 Center
	{
		get

		{
			throw new System.NotImplementedException();
		}
		private set

		{
			throw new System.NotImplementedException();
		}
	}

	public override GlRectangle BOX
	{
		get

		{
			throw new System.NotImplementedException();
		}
		private set

		{
			throw new System.NotImplementedException();
		}
	}

	public GlPointR2(float x, float y)
	{
	}

	public GlPointR2(GlPointR2 copyPoint)
	{
	}

	public override void moveTo(float x, float y)
	{
		throw new System.NotImplementedException();
	}

	public override void Rotate(float angle)
	{
		throw new System.NotImplementedException();
	}

	public override void Rotate(float SIN, float COS)
	{
		throw new System.NotImplementedException();
	}

	public override GlFigure getScaled(float scale)
	{
		throw new System.NotImplementedException();
	}

	public override IEnumerable<GlPointR2> getIntersection(GlLineR2 L)
	{
		throw new System.NotImplementedException();
	}

	public override IEnumerable<GlPointR2> getIntersection(GlCurve C)
	{
		throw new System.NotImplementedException();
	}

	public override IEnumerable<GlPointR2> getIntersection(GlPolygon POLY)
	{
		throw new System.NotImplementedException();
	}

	public override bool isPointBelongs(GlPointR2 P)
	{
		throw new System.NotImplementedException();
	}

	public override void Draw()
	{
		throw new System.NotImplementedException();
	}

	public override void DrawFill()
	{
		throw new System.NotImplementedException();
	}

	public override void Draw(GlTexture T)
	{
		throw new System.NotImplementedException();
	}

	public override void Draw(GlRectangle Border)
	{
		throw new System.NotImplementedException();
	}

	public override void DrawFill(GlRectangle Border)
	{
		throw new System.NotImplementedException();
	}

	public virtual GlPointR2 getPointTranslatedToRotatedSystem(float SIN, float COS, GlPointR2 systemCenter)
	{
		throw new System.NotImplementedException();
	}

	private void ActivateDrawed()
	{
		throw new System.NotImplementedException();
	}

	private void ActivateDrawing()
	{
		throw new System.NotImplementedException();
	}

	private bool ActivateDrawStart()
	{
		throw new System.NotImplementedException();
	}

	public virtual int getDistance(GlPointR2 P)
	{
		throw new System.NotImplementedException();
	}

	public virtual bool isNullPoint()
	{
		throw new System.NotImplementedException();
	}

	public virtual bool Equals(GlPointR2 P)
	{
		throw new System.NotImplementedException();
	}

	public static bool Equals(GlPointR2 P1, GlPointR2 P2)
	{
		throw new System.NotImplementedException();
	}

	public virtual string ToString()
	{
		throw new System.NotImplementedException();
	}

}

